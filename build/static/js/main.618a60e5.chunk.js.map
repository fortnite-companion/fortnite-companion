{"version":3,"sources":["components/statusComponent.js","App.js","serviceWorker.js","index.js"],"names":["Status","state","serverStatus","getServerStatus","_callee","response","data","json","regenerator_default","a","wrap","_context","prev","next","fetch","then","ok","Error","statusText","sent","text","JSON","parse","_this","setState","stop","this","status","react_default","createElement","className","message","Component","App","stats","username","user_id","loading","profileFetched","getUserId","url","uid","getStats","_callee2","_context2","console","log","epicName","handleChangeUsername","event","target","value","handleSubmit","length","content","Fragment","statusComponent","required","type","placeholder","onChange","onClick","overallData","defaultModes","kills","placetop1","matchesplayed","href","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.618a60e5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Status extends Component {\r\n  state = {\r\n    serverStatus: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getServerStatus();\r\n  }\r\n\r\n  getServerStatus = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/status/fortnite_server_status\";\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ serverStatus: json });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.serverStatus.status === \"UP\") {\r\n      return (\r\n        <div className=\"serverContent\">\r\n          <p className=\"serverText\">\r\n            <span className=\"serverUp\" />\r\n            {this.state.serverStatus.message}\r\n          </p>\r\n        </div>\r\n      );\r\n    } else if (this.state.serverStatus.status === \"DOWN\") {\r\n      return (\r\n        <div className=\"serverContent\">\r\n          <p className=\"serverText\">\r\n            <span className=\"serverDown\" /> {this.state.serverStatus.message}\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <p>Fething Status..</p>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Status;\r\n","/**\r\n *\r\n *\r\n * PLAYGROUND CODE FOR TEST\r\n *\r\n *\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Status from \"./components/statusComponent\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    stats: [],\r\n    username: \"\",\r\n    user_id: \"\",\r\n    loading: false,\r\n    profileFetched: false\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  getUserId = async () => {\r\n    this.setState({ loading: true, profileFetched: false });\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/id?username=\" +\r\n      this.state.username;\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ user_id: json.uid });\r\n      this.getStats();\r\n    }\r\n  };\r\n  getStats = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/public/br_stats_v2?user_id=\" +\r\n      this.state.user_id;\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ stats: json });\r\n      console.log(json);\r\n      this.setState({ loading: false });\r\n      if (json.epicName != null) {\r\n        this.setState({ profileFetched: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleChangeUsername = event => {\r\n    this.setState({ username: event.target.value });\r\n  };\r\n  handleSubmit = event => {\r\n    if (this.state.username.length > 0) {\r\n      this.getUserId();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let content = (\r\n      <React.Fragment>\r\n        <Status />\r\n        {/* <select> \r\n          <option value=\"pc\">PC</option>\r\n          <option value=\"psn\">PSN</option>\r\n          <option value=\"xbox\">XBOX</option>\r\n        </select> */}\r\n        <h1 className=\"title-main\">Fortnite Stat Tracker</h1>\r\n        <div className=\"line\" />\r\n        <input\r\n          required={true}\r\n          type=\"text\"\r\n          placeholder=\"Enter your Epic account\"\r\n          onChange={this.handleChangeUsername}\r\n        />\r\n        <button onClick={this.handleSubmit}>Track</button>\r\n      </React.Fragment>\r\n    );\r\n\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"content\">\r\n          <div className=\"loading\">\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (this.state.profileFetched) {\r\n      return (\r\n        <div className=\"content\">\r\n          <h1 className=\"title\">\r\n            Overall data for\r\n            <span className=\"username\"> {this.state.username}</span>\r\n          </h1>\r\n          <div className=\"line\" />\r\n          <div className=\"card\">\r\n            <div className=\"stat-container\">\r\n              <span className=\"label\">\r\n                Kills\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.kills}\r\n                </p>\r\n              </span>\r\n\r\n              <span className=\"label\">\r\n                Wins\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.placetop1}\r\n                </p>\r\n              </span>\r\n\r\n              <span className=\"label\">\r\n                Matches\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.matchesplayed}\r\n                </p>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <a href=\"/\">back</a>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div className=\"content\">{content}</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}