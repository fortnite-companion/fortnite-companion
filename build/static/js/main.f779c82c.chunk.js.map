{"version":3,"sources":["components/weapons/weaponcard/weaponcard.js","components/header/header.js","components/loading/loading.js","components/weapons/weapons.js","components/status/status.js","components/footer/footer.js","App.js","serviceWorker.js","components/frontpage/frontpage.js","components/profile/profile.js","components/store/itemcard/itemcard.js","components/store/timer/timer.js","components/store/store.js","index.js"],"names":["WeaponCard","state","console","log","this","props","weapon","react_default","a","createElement","className","rarity","weaponName","src","weaponImage","Component","Header","react_router_dom","to","Loading","Weapons","weapons","weaponToShow","isLoading","getWeapons","_callee","response","data","json","activeWeapons","wep","regenerator_default","wrap","_context","prev","next","fetch","then","ok","Error","statusText","sent","text","JSON","parse","_this","setState","push","stop","Fragment","header_header","loading","map","weaponcard","name","images","image","Status","serverStatus","getServerStatus","status","message","Footer","components_status_status","Boolean","window","location","hostname","match","Frontpage","username","handleSubmit","event","length","getUserId","url","uid","history","handleChangeUsername","target","value","handleKeypress","key","required","type","placeholder","onChange","onKeyDown","onClick","footer_footer","Profile","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","stats","user_id","profileFetched","fetchparams","async","params","uname","userid","getStats","asyncToGenerator","mark","epicName","overallData","defaultModes","kills","placetop1","matchesplayed","ItemCard","item","background","cost","vbucks","Timer","seconds","time","startTimer","secondsUntilMidnight","tick","setInterval","countdown","secondsDecremented","secondsToTime","midnight","Date","setHours","setMinutes","setSeconds","setMilliseconds","getTime","secs","divisor_for_minutes","divisor_for_seconds","h","Math","floor","m","s","ceil","Store","store","itemsArray","featuredItems","isVisible","getCurrentStore","createItemArray","items","newItemsArray","newFeaturedItems","featured","_this2","itemcard_itemcard","itemid","timer_timer","routing","style","width","height","react_router","exact","path","component","Weapon","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qmBAoBeA,4NAhBbC,MAAQ,sFAGNC,QAAQC,IAAIC,KAAKC,MAAMC,yCAIvB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,KAAKC,MAAMM,OAAS,gBAClCJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeN,KAAKC,MAAMO,YACxCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeG,IAAKT,KAAKC,MAAMS,sBAX7BC,sBC+BVC,4NA7Bbf,MAAQ,2EAEN,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAG,IAAIR,UAAU,aAAvB,SAIFH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAG,SAASR,UAAU,aAA5B,gBAIFH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAG,WAAWR,UAAU,aAA9B,YAIFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAG,cAAcR,UAAU,oBAAjC,sCArBWK,cCkBNI,6MApBblB,MAAQ,2EAEN,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAdHK,aCgFPK,6MA1EbnB,MAAQ,CACNoB,QAAS,GACTC,aAAc,GACdC,WAAW,KAObC,gCAAa,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAR,EAAAS,EAAA,OAAAC,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,aAET,mEAFSF,EAAAE,KAAA,EAIUC,MAFnB,oEAE8BC,KAAK,SAASX,GAC5C,IAAKA,EAASY,GACZ,MAAMC,MAAMb,EAASc,YAEvB,OAAOd,IARE,YAIPA,EAJOO,EAAAQ,MAWEH,GAXF,CAAAL,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAYUT,EAASgB,OAZnB,OAkBT,IAASZ,KANHH,EAZGM,EAAAQ,KAaLb,EAAOe,KAAKC,MAAMjB,GACtBkB,EAAKC,SAAS,CAAEzB,QAASO,IAErBC,EAAgB,GAChBR,EAAUO,EAAI,QAEhBC,EAAckB,KAAK1B,EAAQS,IAE7B5B,QAAQC,IAAI0B,GACZgB,EAAKC,SAAS,CAAExB,aAAcO,IAElB,MAARD,GACFiB,EAAKC,SAAS,CAAEvB,WAAW,IAzBpB,yBAAAU,EAAAe,SAAAvB,yFAHXrB,KAAKoB,8CAkCL,OAAIpB,KAAKH,MAAMsB,UAEXhB,EAAAC,EAAAC,cAACF,EAAAC,EAAMyC,SAAP,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAD,OAKJ5C,EAAAC,EAAAC,cAACF,EAAAC,EAAMyC,SAAP,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAd,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZN,KAAKH,MAAMqB,aAAa8B,IAAI,SAAAtB,GAAG,OAC9BvB,EAAAC,EAAAC,cAAC4C,EAAD,CACEzC,WAAYkB,EAAIwB,KAChBxC,YAAagB,EAAIyB,OAAOC,MACxB7C,OAAQmB,EAAInB,uBA/DVI,aC+CP0C,4NAjDbxD,MAAQ,CACNyD,aAAc,MAOhBC,qCAAkB,SAAAlC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAG,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,aAEd,qFAFcF,EAAAE,KAAA,EAIKC,MAFnB,sFAE8BC,KAAK,SAASX,GAC5C,IAAKA,EAASY,GACZ,MAAMC,MAAMb,EAASc,YAEvB,OAAOd,IARO,YAIZA,EAJYO,EAAAQ,MAWHH,GAXG,CAAAL,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAYKT,EAASgB,OAZd,OAYRf,EAZQM,EAAAQ,KAaVb,EAAOe,KAAKC,MAAMjB,GACtBkB,EAAKC,SAAS,CAAEY,aAAc9B,IAdhB,yBAAAK,EAAAe,SAAAvB,yFAHhBrB,KAAKuD,mDAsBL,MAAuC,OAAnCvD,KAAKH,MAAMyD,aAAaE,OAExBrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACfN,KAAKH,MAAMyD,aAAaG,UAM7BtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eADlB,8BAxCWK,cCwBN+C,qNAvBb7D,MAAQ,2EAEN,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsD,EAAD,OAEFxD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BAAb,oGAKFH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAb,qDAfWK,cCSHA,YCAEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6ECmDSC,6MA/DbpE,MAAQ,CAAEqE,SAAU,MAEpBC,aAAe,SAAAC,GACqB,IAA9B3B,EAAK5C,MAAMqE,SAASG,QACtB5B,EAAK6B,eAITA,+BAAY,SAAAjD,IAAA,IAAAkD,EAAAjD,EAAAC,EAAAC,EAAAgD,EAAAN,EAAA,OAAAvC,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACNwC,EACF,0EACA9B,EAAK5C,MAAMqE,SAHHrC,EAAAE,KAAA,EAKWC,MAAMuC,GAAKtC,KAAK,SAASX,GAC5C,IAAKA,EAASY,GACZ,MAAMC,MAAMb,EAASc,YAEvB,OAAOd,IATC,YAKNA,EALMO,EAAAQ,MAYGH,GAZH,CAAAL,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAaWT,EAASgB,OAbpB,OAaFf,EAbEM,EAAAQ,KAcJb,EAAOe,KAAKC,MAAMjB,GAClBiD,EAAMhD,EAAKgD,IACXN,EAAWzB,EAAK5C,MAAMqE,SACf,MAAPM,GACF/B,EAAKxC,MAAMwE,QAAQ9B,KAAK,WAAauB,EAAW,IAAMM,GAlBhD,yBAAA3C,EAAAe,SAAAvB,QAsBZqD,qBAAuB,SAAAN,GACrB3B,EAAKC,SAAS,CAAEwB,SAAUE,EAAMO,OAAOC,WAEzCC,eAAiB,SAAAT,GACE,SAAbA,EAAMU,KACRrC,EAAK0B,wFAKP,OACEhE,EAAAC,EAAAC,cAACF,EAAAC,EAAMyC,SAAP,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,sBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,SACE0E,UAAU,EACVC,KAAK,OACLC,YAAY,0BACZC,SAAUlF,KAAK0E,qBACfS,UAAWnF,KAAK6E,iBAElB1E,EAAAC,EAAAC,cAAA,UAAQ+E,QAASpF,KAAKmE,cAAtB,SACAhE,EAAAC,EAAAC,cAACgF,EAAD,gBAxDY1E,aC8GT2E,6BAnGb,SAAAA,IAAc,IAAA7C,EAAA,OAAA8C,OAAAC,EAAA,EAAAD,CAAAvF,KAAAsF,IACZ7C,EAAA8C,OAAAE,EAAA,EAAAF,CAAAvF,KAAAuF,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA3F,QATFH,MAAQ,CACN+F,MAAO,GACP1B,SAAU,GACV2B,QAAS,GACT9C,SAAS,EACT+C,gBAAgB,GAGJrD,EAQdsD,YAAc,SAAAC,GACZ,IAAIC,EAASxD,EAAKxC,MAAM+D,MAAMiC,OAC1BC,EAAQD,EAAO/B,SACfM,EAAMyB,EAAOE,OACjB1D,EAAKC,SAAS,CAAEwB,SAAUgC,EAAOL,QAASrB,KAZ9B/B,EAcd2D,SAdcb,OAAAc,EAAA,EAAAd,CAAA5D,EAAAvB,EAAAkG,KAcH,SAAAjF,IAAA,IAAAkD,EAAAjD,EAAAC,EAAAC,EAAA,OAAAG,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACTU,EAAKC,SAAS,CAAEK,SAAS,IADhBlB,EAAAE,KAAA,EAEHU,EAAKsD,cAFF,cAGLxB,EACF,yFACA9B,EAAK5C,MAAMgG,QALJhE,EAAAE,KAAA,EAMYC,MAAMuC,GAAKtC,KAAK,SAASX,GAC5C,IAAKA,EAASY,GACZ,MAAMC,MAAMb,EAASc,YAEvB,OAAOd,IAVA,YAMLA,EANKO,EAAAQ,MAAA,CAAAR,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GAcYT,EAASgB,OAdrB,QAcDf,EAdCM,EAAAQ,KAeHb,EAAOe,KAAKC,MAAMjB,GACtBkB,EAAKC,SAAS,CAAEkD,MAAOpE,IACvBiB,EAAKC,SAAS,CAAEK,SAAS,IACJ,MAAjBvB,EAAK+E,UACP9D,EAAKC,SAAS,CAAEoD,gBAAgB,IAnB3B,yBAAAjE,EAAAe,SAAAvB,MAdGoB,mFAKZzC,KAAKoG,4CAkCL,OAAIpG,KAAKH,MAAMkD,QAEX5C,EAAAC,EAAAC,cAACF,EAAAC,EAAMyC,SAAP,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAACgF,EAAD,OAGKrF,KAAKH,MAAMiG,eAElB3F,EAAAC,EAAAC,cAACF,EAAAC,EAAMyC,SAAP,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,mBAEEH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,IAA6BN,KAAKH,MAAMqE,WAE1C/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,QAEEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QACVN,KAAKH,MAAM+F,MAAMY,YAAYC,aAAaC,QAI/CvG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,OAEEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QACVN,KAAKH,MAAM+F,MAAMY,YAAYC,aAAaE,YAI/CxG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,UAEEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QACVN,KAAKH,MAAM+F,MAAMY,YAAYC,aAAaG,kBAKnDzG,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAG,KAAT,UAGJX,EAAAC,EAAAC,cAACgF,EAAD,OAKJlF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAKL,KAAKH,MAAMqE,UAChB/D,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAG,KAAT,QACAX,EAAAC,EAAAC,cAACgF,EAAD,cAtGc1E,sBCuBPkG,mOAzBbhH,MAAQ,wHAIN,OAAuB,MAAnBG,KAAKH,MAAMiH,KACN3G,EAAAC,EAAAC,cAAC0C,EAAD,MAGP5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVG,IAAKT,KAAKC,MAAM6G,KAAKA,KAAK3D,OAAO4D,aAEnC5G,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBN,KAAKC,MAAM6G,KAAKA,KAAK5D,MAErD/C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBACVN,KAAKC,MAAM6G,KAAKE,KAEjB7G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBG,IAAKT,KAAKC,MAAMgH,kBAnBrCtG,cC8DRuG,mOA/DbrH,MAAQ,CAAEsH,QAAS,EAAGC,KAAM,MAqB5BC,WAAa,WACX5E,EAAKC,SAAS,CAAEyE,QAAS1E,EAAK6E,yBAC9B7E,EAAK8E,UAGPA,KAAO,WACLC,YAAY/E,EAAKgF,UAAW,QAE9BA,UAAY,WACV,IAAIC,EAAqBjF,EAAK5C,MAAMsH,QAAU,EAC9C1E,EAAKC,SAAS,CACZyE,QAASO,EACTN,KAAM3E,EAAKkF,cAAcD,QAG7BJ,qBAAuB,WACrB,IAAIM,EAAW,IAAIC,KAKnB,OAJAD,EAASE,SAAS,IAClBF,EAASG,WAAW,GACpBH,EAASI,WAAW,GACpBJ,EAASK,gBAAgB,IACjBL,EAASM,WAAY,IAAIL,MAAOK,WAAa,wFAxCrDlI,KAAKqH,mDAGOc,GACZ,IAEIC,EAAsBD,EAAI,KAG1BE,EAAsBD,EAAsB,GAQhD,MALU,CACRE,EATUC,KAAKC,MAAML,EAAI,MAUzBM,EAPYF,KAAKC,MAAMJ,EAAsB,IAQ7CM,EALYH,KAAKI,KAAKN,qCAiCxB,OAAyB,MAArBrI,KAAKH,MAAMuH,KAAKkB,EAEhBnI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,eAEG,IACCN,KAAKH,MAAMuH,KAAKkB,EAChB,KACAtI,KAAKH,MAAMuH,KAAKqB,EAChB,KACAzI,KAAKH,MAAMuH,KAAKsB,EAChB,KAIDvI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,yBA5DSK,cC6GLiI,6MAtGb/I,MAAQ,CACNsB,WAAW,EACX0H,MAAO,GACPC,WAAY,GACZC,cAAe,GACfC,UAAW,YAMbC,qCAAkB,SAAA5H,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAG,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,aAEd,6EAFcF,EAAAE,KAAA,EAGKC,MADnB,8EAC8BC,KAAK,SAASX,GAC5C,IAAKA,EAASY,GACZ,MAAMC,MAAMb,EAASc,YAEvB,OAAOd,IAPO,YAGZA,EAHYO,EAAAQ,MAAA,CAAAR,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAUKT,EAASgB,OAVd,OAURf,EAVQM,EAAAQ,KAWVb,EAAOe,KAAKC,MAAMjB,GACtBkB,EAAKC,SAAS,CAAEmG,MAAOrH,IACvBiB,EAAKC,SAAS,CAAEK,SAAS,IACb,MAARvB,IACFiB,EAAKyG,kBACLzG,EAAKC,SAAS,CAAEvB,WAAW,EAAO6H,UAAW,aAhBjC,yBAAAnH,EAAAe,SAAAvB,QAqBlB6H,gBAAkB,WAChB,IAAIC,EAAQ1G,EAAK5C,MAAMgJ,MAAMM,MACzBC,EAAgB,GAChBC,EAAmB,GACvB,IAAK,IAAIvC,KAAQqC,EACc,IAAzBA,EAAMrC,GAAMwC,SACdD,EAAiB1G,KAAKwG,EAAMrC,IAE5BsC,EAAczG,KAAKwG,EAAMrC,IAG7BrE,EAAKC,SAAS,CACZoG,WAAYM,EACZL,cAAeM,wFApCjBrJ,KAAKiJ,mDAuCE,IAAAM,EAAAvJ,KACP,OAAIA,KAAKH,MAAMsB,UAEXhB,EAAAC,EAAAC,cAACF,EAAAC,EAAMyC,SAAP,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAD,OAKJ5C,EAAAC,EAAAC,cAACF,EAAAC,EAAMyC,SAAP,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBAAmBN,KAAKH,MAAMmJ,WAC5C7I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,YACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,mBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZN,KAAKH,MAAMkJ,cAAc/F,IAAI,SAAA8D,GAAI,OAChC3G,EAAAC,EAAAC,cAACmJ,EAAD,CACEvC,OAAQsC,EAAK1J,MAAMgJ,MAAM5B,OACzBnC,IAAKgC,EAAK2C,OACV3C,KAAMA,QAMd3G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,eACAH,EAAAC,EAAAC,cAACqJ,EAAD,MACAvJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZN,KAAKH,MAAMiJ,WAAW9F,IAAI,SAAA8D,GAAI,OAC7B3G,EAAAC,EAAAC,cAACmJ,EAAD,CACEvC,OAAQsC,EAAK1J,MAAMgJ,MAAM5B,OACzBnC,IAAKgC,EAAK2C,OACV3C,KAAMA,kBA3FNnG,aCGdgJ,EACJxJ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAAA,OAAKuJ,MAAO,CAAEC,MAAO,OAAWC,OAAQ,SACtC3J,EAAAC,EAAAC,cAAC0J,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjG,IACjC9D,EAAAC,EAAAC,cAAC0J,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWC,IAClChK,EAAAC,EAAAC,cAAC0J,EAAA,EAAD,CAAOE,KAAK,6BAA6BC,UAAW5E,IACpDnF,EAAAC,EAAAC,cAAC0J,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWtB,MAKtCwB,IAASC,OAAOV,EAASW,SAASC,eAAe,SN2G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzI,KAAK,SAAA0I,GACjCA,EAAaC","file":"static/js/main.f779c82c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./weaponscard.css\";\r\n\r\nclass WeaponCard extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    console.log(this.props.weapon);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.rarity + \" weapon-card\"}>\r\n        <h1 className=\"weapon-name\">{this.props.weaponName}</h1>\r\n        <img className=\"weapon-image\" src={this.props.weaponImage} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeaponCard;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./header.css\";\r\nimport \"./header-small.css\";\r\nclass Header extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <div>\r\n          <Link to=\"/\" className=\"link-text\">\r\n            Home\r\n          </Link>\r\n        </div>\r\n        <div>\r\n          <Link to=\"/store\" className=\"link-text\">\r\n            Daily Store\r\n          </Link>\r\n        </div>\r\n        <div>\r\n          <Link to=\"/weapons\" className=\"link-text\">\r\n            Weapons\r\n          </Link>\r\n        </div>\r\n        <div className=\"locked\">\r\n          <Link to=\"/challenges\" className=\"link-text locked\">\r\n            Challenges (Coming Soon!)\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nclass Loading extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"content\">\r\n        <div className=\"loading\">\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import React, { Component } from \"react\";\r\nimport \"./weapons.css\";\r\nimport WeaponCard from \"./weaponcard/weaponcard\";\r\nimport Header from \"../header/header\";\r\nimport Loading from \"../loading/loading\";\r\n\r\nclass Weapons extends Component {\r\n  state = {\r\n    weapons: \"\",\r\n    weaponToShow: [],\r\n    isLoading: true\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getWeapons();\r\n  }\r\n\r\n  getWeapons = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/weapons/get\";\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ weapons: json });\r\n\r\n      let activeWeapons = [];\r\n      let weapons = json[\"weapons\"];\r\n      for (let wep in weapons) {\r\n        activeWeapons.push(weapons[wep]);\r\n      }\r\n      console.log(activeWeapons);\r\n      this.setState({ weaponToShow: activeWeapons });\r\n\r\n      if (json != null) {\r\n        this.setState({ isLoading: false });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <React.Fragment>\r\n          <Header />\r\n          <Loading />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <div className=\"content content-weapons-wrapper\">\r\n          <div className=\"content-weapons\">\r\n            <div className=\"weapon-box\">\r\n              <h1 className=\"title title-weapon\">Weapons</h1>\r\n              <div className=\"line line-weapon\" />\r\n              <div className=\"weapons\">\r\n                {this.state.weaponToShow.map(wep => (\r\n                  <WeaponCard\r\n                    weaponName={wep.name}\r\n                    weaponImage={wep.images.image}\r\n                    rarity={wep.rarity}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weapons;\r\n","import React, { Component } from \"react\";\r\nimport \"./status.css\";\r\n\r\nclass Status extends Component {\r\n  state = {\r\n    serverStatus: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getServerStatus();\r\n  }\r\n\r\n  getServerStatus = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/status/fortnite_server_status\";\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ serverStatus: json });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.serverStatus.status === \"UP\") {\r\n      return (\r\n        <div className=\"serverContent\">\r\n          <p className=\"serverText\">\r\n            <span className=\"serverUp\" />\r\n            {this.state.serverStatus.message}\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"serverContent\">\r\n          <p className=\"serverText\">\r\n            <span className=\"serverDown\" />\r\n            Fortnite is down..\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Status;\r\n","import React, { Component } from \"react\";\r\nimport Status from \"../status/status\";\r\nimport \"./footer.css\";\r\nclass Footer extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <div>\r\n          <Status />\r\n        </div>\r\n        <div>\r\n          <p className=\"disclaimer footer-text\">\r\n            This service is not associated with Epic Games and is developed\r\n            without their granted permisson\r\n          </p>\r\n        </div>\r\n        <div>\r\n          <p className=\"footer-text credit\">\r\n            Devloped by magnusrambech & thomasrognes\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","/**\r\n *\r\n *\r\n * PLAYGROUND CODE FOR TEST, NO LONGER BEING USED\r\n *\r\n *\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Footer from \"./components/footer/footer\";\r\nimport { Redirect } from \"react-router\";\r\nclass App extends Component {\r\n  state = {\r\n    stats: [],\r\n    username: \"\",\r\n    user_id: \"\",\r\n    loading: false,\r\n    profileFetched: false\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  getUserId = async () => {\r\n    this.setState({ loading: true, profileFetched: false });\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/id?username=\" +\r\n      this.state.username;\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ user_id: json.uid });\r\n      this.getStats();\r\n    }\r\n  };\r\n  getUserIdNew = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/id?username=\" +\r\n      this.state.username;\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      let uid = json.uid;\r\n      let username = this.state.username;\r\n      if (uid != null) {\r\n        this.props.history.push(\"profile/\" + username + \"/\" + uid);\r\n      }\r\n    }\r\n  };\r\n  getStats = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/public/br_stats_v2?user_id=\" +\r\n      this.state.user_id;\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ stats: json });\r\n      this.setState({ loading: false });\r\n      if (json.epicName != null) {\r\n        this.setState({ profileFetched: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleChangeUsername = event => {\r\n    this.setState({ username: event.target.value });\r\n  };\r\n  handleSubmit = event => {\r\n    if (this.state.username.length > 0) {\r\n      this.getUserId();\r\n    }\r\n  };\r\n  handleSubmitNew = event => {\r\n    if (this.state.username.length > 0) {\r\n      this.getUserIdNew();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let content = (\r\n      <React.Fragment>\r\n        <h1 className=\"title-main\">Fortnite Companion</h1>\r\n        <div className=\"line\" />\r\n        <input\r\n          required={true}\r\n          type=\"text\"\r\n          placeholder=\"Enter your Epic account\"\r\n          onChange={this.handleChangeUsername}\r\n        />\r\n        <button onClick={this.handleSubmit}>Track</button>\r\n        <button onClick={this.handleSubmitNew}>track new</button>\r\n        <Footer />\r\n      </React.Fragment>\r\n    );\r\n\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"content\">\r\n          <div className=\"loading\">\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (this.state.profileFetched) {\r\n      return (\r\n        <div className=\"content\">\r\n          <h1 className=\"title\">\r\n            Overall data for\r\n            <span className=\"username\"> {this.state.username}</span>\r\n          </h1>\r\n          <div className=\"line\" />\r\n          <div className=\"card\">\r\n            <div className=\"stat-container\">\r\n              <span className=\"label\">\r\n                Kills\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.kills}\r\n                </p>\r\n              </span>\r\n\r\n              <span className=\"label\">\r\n                Wins\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.placetop1}\r\n                </p>\r\n              </span>\r\n\r\n              <span className=\"label\">\r\n                Matches\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.matchesplayed}\r\n                </p>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <a href=\"/\">back</a>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div className=\"content\">{content}</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Footer from \"../footer/footer\";\r\nimport \"./frontpage.css\";\r\nimport \"./frontpage-small.css\";\r\nimport Header from \"../header/header\";\r\nclass Frontpage extends Component {\r\n  state = { username: \"\" };\r\n\r\n  handleSubmit = event => {\r\n    if (this.state.username.length != \"\") {\r\n      this.getUserId();\r\n    }\r\n  };\r\n\r\n  getUserId = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/id?username=\" +\r\n      this.state.username;\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      let uid = json.uid;\r\n      let username = this.state.username;\r\n      if (uid != null) {\r\n        this.props.history.push(\"profile/\" + username + \"/\" + uid);\r\n      }\r\n    }\r\n  };\r\n  handleChangeUsername = event => {\r\n    this.setState({ username: event.target.value });\r\n  };\r\n  handleKeypress = event => {\r\n    if (event.key == \"Enter\") {\r\n      this.handleSubmit();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <div className=\"content\">\r\n          <div className=\"content-frontpage\">\r\n            <h1 className=\"title-main\">Fortnite Companion</h1>\r\n            <div className=\"line\" />\r\n            <input\r\n              required={true}\r\n              type=\"text\"\r\n              placeholder=\"Enter your Epic account\"\r\n              onChange={this.handleChangeUsername}\r\n              onKeyDown={this.handleKeypress}\r\n            />\r\n            <button onClick={this.handleSubmit}>Track</button>\r\n            <Footer />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Frontpage;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./profile.css\";\r\nimport \"./profile-small.css\";\r\nimport Header from \"../header/header\";\r\nimport Footer from \"../footer/footer\";\r\nimport Loading from \"../loading/loading\";\r\nclass Profile extends Component {\r\n  state = {\r\n    stats: [],\r\n    username: \"\",\r\n    user_id: \"\",\r\n    loading: false,\r\n    profileFetched: false\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getStats();\r\n  }\r\n\r\n  fetchparams = async => {\r\n    let params = this.props.match.params;\r\n    let uname = params.username;\r\n    let uid = params.userid;\r\n    this.setState({ username: uname, user_id: uid });\r\n  };\r\n  getStats = async () => {\r\n    this.setState({ loading: true });\r\n    await this.fetchparams();\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/public/br_stats_v2?user_id=\" +\r\n      this.state.user_id;\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ stats: json });\r\n      this.setState({ loading: false });\r\n      if (json.epicName != null) {\r\n        this.setState({ profileFetched: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <React.Fragment>\r\n          <Header />\r\n          <Loading />\r\n          <Footer />\r\n        </React.Fragment>\r\n      );\r\n    } else if (this.state.profileFetched) {\r\n      return (\r\n        <React.Fragment>\r\n          <Header />\r\n          <div className=\"content\">\r\n            <div className=\"content-profile\">\r\n              <h1 className=\"title\">\r\n                Overall data for\r\n                <span className=\"username\"> {this.state.username}</span>\r\n              </h1>\r\n              <div className=\"line\" />\r\n              <div className=\"card\">\r\n                <div className=\"stat-container\">\r\n                  <span className=\"label\">\r\n                    Kills\r\n                    <p className=\"stat\">\r\n                      {this.state.stats.overallData.defaultModes.kills}\r\n                    </p>\r\n                  </span>\r\n\r\n                  <span className=\"label\">\r\n                    Wins\r\n                    <p className=\"stat\">\r\n                      {this.state.stats.overallData.defaultModes.placetop1}\r\n                    </p>\r\n                  </span>\r\n\r\n                  <span className=\"label\">\r\n                    Matches\r\n                    <p className=\"stat\">\r\n                      {this.state.stats.overallData.defaultModes.matchesplayed}\r\n                    </p>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <Link to=\"/\">back</Link>\r\n            </div>\r\n          </div>\r\n          <Footer />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"content\">\r\n        <h1>{this.state.username}</h1>\r\n        <Link to=\"/\">back</Link>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\r\nimport Loading from \"../../loading/loading\";\r\nimport \"./itemcard.css\";\r\nimport \"./itemcard-small.css\";\r\nclass ItemCard extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {}\r\n  render() {\r\n    if (this.state.item != null) {\r\n      return <Loading />;\r\n    }\r\n    return (\r\n      <div className=\"item-card\">\r\n        <img\r\n          className=\"store-image\"\r\n          src={this.props.item.item.images.background}\r\n        />\r\n        <h1 className=\"item-name item\">{this.props.item.item.name}</h1>\r\n        {/*  <p className=\"item-desc item\">{this.props.item.item.description}</p> */}\r\n        <p className=\"item-price item\">\r\n          {this.props.item.cost}\r\n\r\n          <img className=\"vbucks-item-card\" src={this.props.vbucks} />\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ItemCard;\r\n","import React, { Component } from \"react\";\r\nimport \"./timer.css\";\r\nclass Timer extends Component {\r\n  state = { seconds: 0, time: {} };\r\n  componentDidMount() {\r\n    this.startTimer();\r\n  }\r\n\r\n  secondsToTime(secs) {\r\n    let hours = Math.floor(secs / (60 * 60));\r\n\r\n    let divisor_for_minutes = secs % (60 * 60);\r\n    let minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n    let divisor_for_seconds = divisor_for_minutes % 60;\r\n    let seconds = Math.ceil(divisor_for_seconds);\r\n\r\n    let obj = {\r\n      h: hours,\r\n      m: minutes,\r\n      s: seconds\r\n    };\r\n    return obj;\r\n  }\r\n  startTimer = () => {\r\n    this.setState({ seconds: this.secondsUntilMidnight() });\r\n    this.tick();\r\n  };\r\n\r\n  tick = () => {\r\n    setInterval(this.countdown, 1000);\r\n  };\r\n  countdown = () => {\r\n    let secondsDecremented = this.state.seconds - 1;\r\n    this.setState({\r\n      seconds: secondsDecremented,\r\n      time: this.secondsToTime(secondsDecremented)\r\n    });\r\n  };\r\n  secondsUntilMidnight = () => {\r\n    var midnight = new Date();\r\n    midnight.setHours(24);\r\n    midnight.setMinutes(0);\r\n    midnight.setSeconds(0);\r\n    midnight.setMilliseconds(0);\r\n    return (midnight.getTime() - new Date().getTime()) / 1000;\r\n  };\r\n  render() {\r\n    if (this.state.time.h != null) {\r\n      return (\r\n        <span className=\"timer\">\r\n          New deals in\r\n          {\" \" +\r\n            this.state.time.h +\r\n            \"h \" +\r\n            this.state.time.m +\r\n            \"m \" +\r\n            this.state.time.s +\r\n            \"s\"}\r\n        </span>\r\n      );\r\n    }\r\n    return <span className=\"timer\">Getting time..</span>;\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from \"react\";\r\nimport Header from \"../header/header\";\r\nimport Loading from \"../loading/loading\";\r\nimport { tsNumberKeyword } from \"@babel/types\";\r\nimport ItemCard from \"./itemcard/itemcard\";\r\nimport \"./store.css\";\r\nimport \"./store-small.css\";\r\nimport Timer from \"./timer/timer\";\r\nclass Store extends Component {\r\n  state = {\r\n    isLoading: true,\r\n    store: \"\",\r\n    itemsArray: [],\r\n    featuredItems: [],\r\n    isVisible: \"hidden\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getCurrentStore();\r\n  }\r\n  getCurrentStore = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/store/get?language=en\";\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n    if (response) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ store: json });\r\n      this.setState({ loading: false });\r\n      if (json != null) {\r\n        this.createItemArray();\r\n        this.setState({ isLoading: false, isVisible: \"visible\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  createItemArray = () => {\r\n    let items = this.state.store.items;\r\n    let newItemsArray = [];\r\n    let newFeaturedItems = [];\r\n    for (let item in items) {\r\n      if (items[item].featured === 1) {\r\n        newFeaturedItems.push(items[item]);\r\n      } else {\r\n        newItemsArray.push(items[item]);\r\n      }\r\n    }\r\n    this.setState({\r\n      itemsArray: newItemsArray,\r\n      featuredItems: newFeaturedItems\r\n    });\r\n  };\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <React.Fragment>\r\n          <Header />\r\n          <Loading />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <div className=\"content content-store-wrapper\">\r\n          <div className={\"content-store \" + this.state.isVisible}>\r\n            <div className=\"store-box featured-box\">\r\n              <div className=\"store-category\">\r\n                <h1 className=\"title title-store\">Featured</h1>\r\n                <span className=\"timer\">Exclusive deals</span>\r\n                <div className=\"line line-store\" />\r\n              </div>\r\n              <div className=\"item-list\">\r\n                {this.state.featuredItems.map(item => (\r\n                  <ItemCard\r\n                    vbucks={this.state.store.vbucks}\r\n                    key={item.itemid}\r\n                    item={item}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"store-box daily-box\">\r\n              <div className=\"store-category\">\r\n                <h1 className=\"title title-store\">Daily Store</h1>\r\n                <Timer />\r\n                <div className=\"line line-store\" />\r\n              </div>\r\n              <div className=\"item-list\">\r\n                {this.state.itemsArray.map(item => (\r\n                  <ItemCard\r\n                    vbucks={this.state.store.vbucks}\r\n                    key={item.itemid}\r\n                    item={item}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Weapon from \"./components/weapons/weapons\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Frontpage from \"./components/frontpage/frontpage\";\r\nimport Profile from \"./components/profile/profile\";\r\nimport { BrowserRouter, HashRouter, Route } from \"react-router-dom\";\r\nimport Store from \"./components/store/store\";\r\n\r\nconst routing = (\r\n  <HashRouter>\r\n    <div style={{ width: 100 + \"%\", height: 100 + \"%\" }}>\r\n      <Route exact path=\"/\" component={Frontpage} />\r\n      <Route path=\"/weapons\" component={Weapon} />\r\n      <Route path=\"/profile/:username/:userid\" component={Profile} />\r\n      <Route path=\"/store\" component={Store} />\r\n    </div>\r\n  </HashRouter>\r\n);\r\n\r\nReactDOM.render(routing, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}