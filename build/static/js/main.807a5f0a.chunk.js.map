{"version":3,"sources":["components/header/header.js","components/weapons/weapons.js","components/status/status.js","components/footer/footer.js","App.js","serviceWorker.js","components/frontpage/frontpage.js","components/loading/loading.js","components/profile/profile.js","components/store/itemcard/itemcard.js","components/store/store.js","index.js"],"names":["Header","state","react_default","a","createElement","className","react_router_dom","to","Component","Weapons","weapons","getWeapons","_callee","response","data","json","weaponImages","i","element","wep","regenerator_default","wrap","_context","prev","next","fetch","then","ok","Error","statusText","sent","text","JSON","parse","length","images","image","push","console","log","_this","setState","stop","this","Fragment","header_header","Status","serverStatus","getServerStatus","status","message","Footer","components_status_status","Boolean","window","location","hostname","match","Frontpage","handleSubmit","event","username","getUserId","url","uid","props","history","handleChangeUsername","target","value","handleKeypress","key","required","type","placeholder","onChange","onKeyDown","onClick","footer_footer","Loading","Profile","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","stats","user_id","loading","profileFetched","fetchparams","async","params","uname","userid","getStats","asyncToGenerator","mark","epicName","overallData","defaultModes","kills","placetop1","matchesplayed","href","ItemCard","item","src","information","name","cost","vbucks","Store","isLoading","store","itemsArray","getCurrentStore","createItemArray","items","newItemsArray","_this2","map","itemcard_itemcard","itemid","routing","style","width","height","react_router","exact","path","component","Weapon","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.807a5f0a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./header.css\";\r\nimport \"./header-small.css\";\r\nclass Header extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <div>\r\n          <Link to=\"/\" className=\"link-text\">\r\n            Home\r\n          </Link>\r\n        </div>\r\n        <div>\r\n          <Link to=\"/store\" className=\"link-text\">\r\n            Daily Store\r\n          </Link>\r\n        </div>\r\n        <div className=\"locked\">\r\n          <Link to=\"/weapons\" className=\"link-text locked\">\r\n            Weapons (Coming Soon!)\r\n          </Link>\r\n        </div>\r\n        <div className=\"locked\">\r\n          <Link to=\"/challenges\" className=\"link-text locked\">\r\n            Challenges (Coming Soon!)\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport \"./weapons.css\";\r\nimport Header from \"../header/header\";\r\n\r\nclass Weapons extends Component {\r\n  state = {\r\n    weapons: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getWeapons();\r\n  }\r\n\r\n  getWeapons = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/weapons/get\";\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n\r\n      let weaponImages = [];\r\n      for (let i = 0; i < json.weapons.length; i++) {\r\n        const element = json.weapons[i].images.image;\r\n        weaponImages.push(element);\r\n      }\r\n      console.log(weaponImages);\r\n\r\n      this.setState({ weapons: json });\r\n\r\n      let weapons = json[\"weapons\"];\r\n      for (let wep in weapons) {\r\n        console.log(weapons[wep]);\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <div className=\"content\">\r\n          <h1>Weapons</h1>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weapons;\r\n","import React, { Component } from \"react\";\r\nimport \"./status.css\";\r\n\r\nclass Status extends Component {\r\n  state = {\r\n    serverStatus: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getServerStatus();\r\n  }\r\n\r\n  getServerStatus = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/status/fortnite_server_status\";\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ serverStatus: json });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.serverStatus.status === \"UP\") {\r\n      return (\r\n        <div className=\"serverContent\">\r\n          <p className=\"serverText\">\r\n            <span className=\"serverUp\" />\r\n            {this.state.serverStatus.message}\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"serverContent\">\r\n          <p className=\"serverText\">\r\n            <span className=\"serverDown\" />\r\n            Fortnite is down..\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Status;\r\n","import React, { Component } from \"react\";\r\nimport Status from \"../status/status\";\r\nimport \"./footer.css\";\r\nclass Footer extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <div>\r\n          <Status />\r\n        </div>\r\n        <div>\r\n          <p className=\"disclaimer footer-text\">\r\n            This service is not associated with Epic Games and is developed\r\n            without their granted permisson\r\n          </p>\r\n        </div>\r\n        <div>\r\n          <p className=\"footer-text credit\">\r\n            Devloped by magnusrambech & thomasrognes\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","/**\r\n *\r\n *\r\n * PLAYGROUND CODE FOR TEST, NO LONGER BEING USED\r\n *\r\n *\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Footer from \"./components/footer/footer\";\r\nimport { Redirect } from \"react-router\";\r\nclass App extends Component {\r\n  state = {\r\n    stats: [],\r\n    username: \"\",\r\n    user_id: \"\",\r\n    loading: false,\r\n    profileFetched: false\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  getUserId = async () => {\r\n    this.setState({ loading: true, profileFetched: false });\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/id?username=\" +\r\n      this.state.username;\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ user_id: json.uid });\r\n      this.getStats();\r\n    }\r\n  };\r\n  getUserIdNew = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/id?username=\" +\r\n      this.state.username;\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      let uid = json.uid;\r\n      let username = this.state.username;\r\n      if (uid != null) {\r\n        this.props.history.push(\"profile/\" + username + \"/\" + uid);\r\n      }\r\n    }\r\n  };\r\n  getStats = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/public/br_stats_v2?user_id=\" +\r\n      this.state.user_id;\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ stats: json });\r\n      this.setState({ loading: false });\r\n      if (json.epicName != null) {\r\n        this.setState({ profileFetched: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleChangeUsername = event => {\r\n    this.setState({ username: event.target.value });\r\n  };\r\n  handleSubmit = event => {\r\n    if (this.state.username.length > 0) {\r\n      this.getUserId();\r\n    }\r\n  };\r\n  handleSubmitNew = event => {\r\n    if (this.state.username.length > 0) {\r\n      this.getUserIdNew();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let content = (\r\n      <React.Fragment>\r\n        <h1 className=\"title-main\">Fortnite Companion</h1>\r\n        <div className=\"line\" />\r\n        <input\r\n          required={true}\r\n          type=\"text\"\r\n          placeholder=\"Enter your Epic account\"\r\n          onChange={this.handleChangeUsername}\r\n        />\r\n        <button onClick={this.handleSubmit}>Track</button>\r\n        <button onClick={this.handleSubmitNew}>track new</button>\r\n        <Footer />\r\n      </React.Fragment>\r\n    );\r\n\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"content\">\r\n          <div className=\"loading\">\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (this.state.profileFetched) {\r\n      return (\r\n        <div className=\"content\">\r\n          <h1 className=\"title\">\r\n            Overall data for\r\n            <span className=\"username\"> {this.state.username}</span>\r\n          </h1>\r\n          <div className=\"line\" />\r\n          <div className=\"card\">\r\n            <div className=\"stat-container\">\r\n              <span className=\"label\">\r\n                Kills\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.kills}\r\n                </p>\r\n              </span>\r\n\r\n              <span className=\"label\">\r\n                Wins\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.placetop1}\r\n                </p>\r\n              </span>\r\n\r\n              <span className=\"label\">\r\n                Matches\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.matchesplayed}\r\n                </p>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <a href=\"/\">back</a>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div className=\"content\">{content}</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Footer from \"../footer/footer\";\r\nimport \"./frontpage.css\";\r\nimport \"./frontpage-small.css\";\r\nimport Header from \"../header/header\";\r\nclass Frontpage extends Component {\r\n  state = {};\r\n\r\n  handleSubmit = event => {\r\n    if (this.state.username.length > 0) {\r\n      this.getUserId();\r\n    }\r\n  };\r\n\r\n  getUserId = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/id?username=\" +\r\n      this.state.username;\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      let uid = json.uid;\r\n      let username = this.state.username;\r\n      if (uid != null) {\r\n        this.props.history.push(\"profile/\" + username + \"/\" + uid);\r\n      }\r\n    }\r\n  };\r\n  handleChangeUsername = event => {\r\n    this.setState({ username: event.target.value });\r\n  };\r\n  handleKeypress = event => {\r\n    if (event.key == \"Enter\") {\r\n      this.handleSubmit();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <div className=\"content\">\r\n          <h1 className=\"title-main\">Fortnite Companion</h1>\r\n          <div className=\"line\" />\r\n          <input\r\n            required={true}\r\n            type=\"text\"\r\n            placeholder=\"Enter your Epic account\"\r\n            onChange={this.handleChangeUsername}\r\n            onKeyDown={this.handleKeypress}\r\n          />\r\n          <button onClick={this.handleSubmit}>Track</button>\r\n          <Footer />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Frontpage;\r\n","import React, { Component } from \"react\";\r\nclass Loading extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"content\">\r\n        <div className=\"loading\">\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n          <div className=\"obj\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./profile.css\";\r\nimport \"./profile-small.css\";\r\nimport Header from \"../header/header\";\r\nimport Loading from \"../loading/loading\";\r\nclass Profile extends Component {\r\n  state = {\r\n    stats: [],\r\n    username: \"\",\r\n    user_id: \"\",\r\n    loading: false,\r\n    profileFetched: false\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getStats();\r\n  }\r\n\r\n  fetchparams = async => {\r\n    let params = this.props.match.params;\r\n    let uname = params.username;\r\n    let uid = params.userid;\r\n    this.setState({ username: uname, user_id: uid });\r\n  };\r\n  getStats = async () => {\r\n    this.setState({ loading: true });\r\n    await this.fetchparams();\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/public/br_stats_v2?user_id=\" +\r\n      this.state.user_id;\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ stats: json });\r\n      this.setState({ loading: false });\r\n      if (json.epicName != null) {\r\n        this.setState({ profileFetched: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <React.Fragment>\r\n          <Header />\r\n          <Loading />\r\n        </React.Fragment>\r\n      );\r\n    } else if (this.state.profileFetched) {\r\n      return (\r\n        <React.Fragment>\r\n          <Header />\r\n          <div className=\"content\">\r\n            <h1 className=\"title\">\r\n              Overall data for\r\n              <span className=\"username\"> {this.state.username}</span>\r\n            </h1>\r\n            <div className=\"line\" />\r\n            <div className=\"card\">\r\n              <div className=\"stat-container\">\r\n                <span className=\"label\">\r\n                  Kills\r\n                  <p className=\"stat\">\r\n                    {this.state.stats.overallData.defaultModes.kills}\r\n                  </p>\r\n                </span>\r\n\r\n                <span className=\"label\">\r\n                  Wins\r\n                  <p className=\"stat\">\r\n                    {this.state.stats.overallData.defaultModes.placetop1}\r\n                  </p>\r\n                </span>\r\n\r\n                <span className=\"label\">\r\n                  Matches\r\n                  <p className=\"stat\">\r\n                    {this.state.stats.overallData.defaultModes.matchesplayed}\r\n                  </p>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <a href=\"/\">back</a>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"content\">\r\n        <h1>{this.state.username}</h1>\r\n        <Link to=\"/\">back</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\r\nimport Loading from \"../../loading/loading\";\r\nimport \"./itemcard.css\";\r\nimport \"./itemcard-small.css\";\r\nclass ItemCard extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    console.log(this.props.item);\r\n  }\r\n  render() {\r\n    if (this.state.item != null) {\r\n      return <Loading />;\r\n    }\r\n    return (\r\n      <div className=\"item-card\">\r\n        <img\r\n          className=\"store-image\"\r\n          src={this.props.item.item.images.information}\r\n        />\r\n        <h1 className=\"item-name item\">{this.props.item.item.name}</h1>\r\n        {/*  <p className=\"item-desc item\">{this.props.item.item.description}</p> */}\r\n        <p className=\"item-price item\">\r\n          {this.props.item.cost}\r\n\r\n          <img className=\"vbucks-item-card\" src={this.props.vbucks} />\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ItemCard;\r\n","import React, { Component } from \"react\";\r\nimport Header from \"../header/header\";\r\nimport Loading from \"../loading/loading\";\r\nimport { tsNumberKeyword } from \"@babel/types\";\r\nimport ItemCard from \"./itemcard/itemcard\";\r\nimport \"./store.css\";\r\nclass Store extends Component {\r\n  state = { isLoading: true, store: \"\", itemsArray: [] };\r\n\r\n  componentDidMount() {\r\n    this.getCurrentStore();\r\n  }\r\n  getCurrentStore = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/store/get?language=en\";\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n    if (response) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ store: json });\r\n      this.setState({ loading: false });\r\n      if (json != null) {\r\n        this.createItemArray();\r\n        this.setState({ isLoading: false });\r\n      }\r\n    }\r\n  };\r\n\r\n  createItemArray = () => {\r\n    let items = this.state.store.items;\r\n    let newItemsArray = [];\r\n    for (let item in items) {\r\n      newItemsArray.push(items[item]);\r\n    }\r\n    this.setState({ itemsArray: newItemsArray });\r\n  };\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <React.Fragment>\r\n          <Header />\r\n          <Loading />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <div className=\"content content-store\">\r\n          <h1 className=\"title title-store\">Daily Store</h1>\r\n          <div className=\"line line-store\" />\r\n          <div className=\"daily-box\">\r\n            {this.state.itemsArray.map(item => (\r\n              <ItemCard\r\n                vbucks={this.state.store.vbucks}\r\n                key={item.itemid}\r\n                item={item}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Weapon from \"./components/weapons/weapons\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Frontpage from \"./components/frontpage/frontpage\";\r\nimport Profile from \"./components/profile/profile\";\r\nimport { BrowserRouter, HashRouter, Route } from \"react-router-dom\";\r\nimport Store from \"./components/store/store\";\r\n\r\nconst routing = (\r\n  <HashRouter>\r\n    <div style={{ width: 100 + \"%\", height: 100 + \"%\" }}>\r\n      <Route exact path=\"/\" component={Frontpage} />\r\n      <Route path=\"/weapons\" component={Weapon} />\r\n      <Route path=\"/profile/:username/:userid\" component={Profile} />\r\n      <Route path=\"/store\" component={Store} />\r\n    </div>\r\n  </HashRouter>\r\n);\r\n\r\nReactDOM.render(routing, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}