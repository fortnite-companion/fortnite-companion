{"version":3,"sources":["components/weapons/weapons.js","components/status/status.js","components/footer/footer.js","App.js","serviceWorker.js","components/frontpage/frontpage.js","components/profile/profile.js","index.js"],"names":["Weapons","state","weapons","getWeapons","_callee","response","data","json","weaponImages","i","element","wep","regenerator_default","a","wrap","_context","prev","next","fetch","then","ok","Error","statusText","sent","text","JSON","parse","length","images","image","push","console","log","_this","setState","stop","this","react_default","createElement","className","Component","Status","serverStatus","getServerStatus","status","message","Footer","components_status_status","Boolean","window","location","hostname","match","Frontpage","handleSubmit","event","username","getUserId","url","uid","props","history","handleChangeUsername","target","value","required","type","placeholder","onChange","onClick","footer_footer","Profile","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","stats","user_id","loading","profileFetched","fetchparams","async","params","uname","userid","getStats","asyncToGenerator","mark","epicName","overallData","defaultModes","kills","placetop1","matchesplayed","href","routing","react_router_dom","style","width","height","react_router","exact","path","component","Weapon","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69f04ae8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./weapons.css\";\r\n\r\nclass Weapons extends Component {\r\n  state = {\r\n    weapons: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getWeapons();\r\n  }\r\n\r\n  getWeapons = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/weapons/get\";\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n\r\n      let weaponImages = [];\r\n      for (let i = 0; i < json.weapons.length; i++) {\r\n        const element = json.weapons[i].images.image;\r\n        weaponImages.push(element);\r\n      }\r\n      console.log(weaponImages);\r\n\r\n      this.setState({ weapons: json });\r\n\r\n      let weapons = json[\"weapons\"];\r\n      for (let wep in weapons) {\r\n        console.log(weapons[wep]);\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"content\">\r\n        <h1>Weapons</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weapons;\r\n","import React, { Component } from \"react\";\r\nimport \"./status.css\";\r\n\r\nclass Status extends Component {\r\n  state = {\r\n    serverStatus: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getServerStatus();\r\n  }\r\n\r\n  getServerStatus = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/status/fortnite_server_status\";\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ serverStatus: json });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.serverStatus.status === \"UP\") {\r\n      return (\r\n        <div className=\"serverContent\">\r\n          <p className=\"serverText\">\r\n            <span className=\"serverUp\" />\r\n            {this.state.serverStatus.message}\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"serverContent\">\r\n          <p className=\"serverText\">\r\n            <span className=\"serverDown\" />\r\n            Fortnite is down..\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Status;\r\n","import React, { Component } from \"react\";\r\nimport Status from \"../status/status\";\r\nimport \"./footer.css\";\r\nclass Footer extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <div>\r\n          <Status />\r\n        </div>\r\n        <div>\r\n          <p className=\"disclaimer footer-text\">\r\n            This service is not associated with Epic Games and is developed\r\n            without their granted permisson\r\n          </p>\r\n        </div>\r\n        <div>\r\n          <p className=\"footer-text\">\r\n            Devloped by magnusrambech & thomasrognes\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","/**\r\n *\r\n *\r\n * PLAYGROUND CODE FOR TEST, NO LONGER BEING USED\r\n *\r\n *\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Footer from \"./components/footer/footer\";\r\nimport { Redirect } from \"react-router\";\r\nclass App extends Component {\r\n  state = {\r\n    stats: [],\r\n    username: \"\",\r\n    user_id: \"\",\r\n    loading: false,\r\n    profileFetched: false\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  getUserId = async () => {\r\n    this.setState({ loading: true, profileFetched: false });\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/id?username=\" +\r\n      this.state.username;\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ user_id: json.uid });\r\n      this.getStats();\r\n    }\r\n  };\r\n  getUserIdNew = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/id?username=\" +\r\n      this.state.username;\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      let uid = json.uid;\r\n      let username = this.state.username;\r\n      if (uid != null) {\r\n        this.props.history.push(\"profile/\" + username + \"/\" + uid);\r\n      }\r\n    }\r\n  };\r\n  getStats = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/public/br_stats_v2?user_id=\" +\r\n      this.state.user_id;\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ stats: json });\r\n      this.setState({ loading: false });\r\n      if (json.epicName != null) {\r\n        this.setState({ profileFetched: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleChangeUsername = event => {\r\n    this.setState({ username: event.target.value });\r\n  };\r\n  handleSubmit = event => {\r\n    if (this.state.username.length > 0) {\r\n      this.getUserId();\r\n    }\r\n  };\r\n  handleSubmitNew = event => {\r\n    if (this.state.username.length > 0) {\r\n      this.getUserIdNew();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let content = (\r\n      <React.Fragment>\r\n        <h1 className=\"title-main\">Fortnite Companion</h1>\r\n        <div className=\"line\" />\r\n        <input\r\n          required={true}\r\n          type=\"text\"\r\n          placeholder=\"Enter your Epic account\"\r\n          onChange={this.handleChangeUsername}\r\n        />\r\n        <button onClick={this.handleSubmit}>Track</button>\r\n        <button onClick={this.handleSubmitNew}>track new</button>\r\n        <Footer />\r\n      </React.Fragment>\r\n    );\r\n\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"content\">\r\n          <div className=\"loading\">\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (this.state.profileFetched) {\r\n      return (\r\n        <div className=\"content\">\r\n          <h1 className=\"title\">\r\n            Overall data for\r\n            <span className=\"username\"> {this.state.username}</span>\r\n          </h1>\r\n          <div className=\"line\" />\r\n          <div className=\"card\">\r\n            <div className=\"stat-container\">\r\n              <span className=\"label\">\r\n                Kills\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.kills}\r\n                </p>\r\n              </span>\r\n\r\n              <span className=\"label\">\r\n                Wins\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.placetop1}\r\n                </p>\r\n              </span>\r\n\r\n              <span className=\"label\">\r\n                Matches\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.matchesplayed}\r\n                </p>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <a href=\"/\">back</a>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div className=\"content\">{content}</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Footer from \"../footer/footer\";\r\nimport \"./frontpage.css\";\r\nclass Frontpage extends Component {\r\n  state = {};\r\n\r\n  handleSubmit = event => {\r\n    if (this.state.username.length > 0) {\r\n      this.getUserId();\r\n    }\r\n  };\r\n\r\n  getUserId = async () => {\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/id?username=\" +\r\n      this.state.username;\r\n\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      let uid = json.uid;\r\n      let username = this.state.username;\r\n      if (uid != null) {\r\n        this.props.history.push(\"profile/\" + username + \"/\" + uid);\r\n      }\r\n    }\r\n  };\r\n  handleChangeUsername = event => {\r\n    this.setState({ username: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"content\">\r\n        <h1 className=\"title-main\">Fortnite Companion</h1>\r\n        <div className=\"line\" />\r\n        <input\r\n          required={true}\r\n          type=\"text\"\r\n          placeholder=\"Enter your Epic account\"\r\n          onChange={this.handleChangeUsername}\r\n        />\r\n        <button onClick={this.handleSubmit}>Track</button>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Frontpage;\r\n","import React, { Component } from \"react\";\r\nimport \"./profile.css\";\r\nclass Profile extends Component {\r\n  state = {\r\n    stats: [],\r\n    username: \"\",\r\n    user_id: \"\",\r\n    loading: false,\r\n    profileFetched: false\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getStats();\r\n  }\r\n\r\n  fetchparams = async => {\r\n    let params = this.props.match.params;\r\n    let uname = params.username;\r\n    let uid = params.userid;\r\n    this.setState({ username: uname, user_id: uid });\r\n  };\r\n  getStats = async () => {\r\n    this.setState({ loading: true });\r\n    await this.fetchparams();\r\n    let url =\r\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/public/br_stats_v2?user_id=\" +\r\n      this.state.user_id;\r\n    let response = await fetch(url).then(function(response) {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    if (response) {\r\n      const data = await response.text();\r\n      let json = JSON.parse(data);\r\n      this.setState({ stats: json });\r\n      this.setState({ loading: false });\r\n      if (json.epicName != null) {\r\n        this.setState({ profileFetched: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"content\">\r\n          <div className=\"loading\">\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n            <div className=\"obj\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (this.state.profileFetched) {\r\n      return (\r\n        <div className=\"content\">\r\n          <h1 className=\"title\">\r\n            Overall data for\r\n            <span className=\"username\"> {this.state.username}</span>\r\n          </h1>\r\n          <div className=\"line\" />\r\n          <div className=\"card\">\r\n            <div className=\"stat-container\">\r\n              <span className=\"label\">\r\n                Kills\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.kills}\r\n                </p>\r\n              </span>\r\n\r\n              <span className=\"label\">\r\n                Wins\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.placetop1}\r\n                </p>\r\n              </span>\r\n\r\n              <span className=\"label\">\r\n                Matches\r\n                <p className=\"stat\">\r\n                  {this.state.stats.overallData.defaultModes.matchesplayed}\r\n                </p>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <a href=\"/\">back</a>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"content\">\r\n        <h1>{this.state.username}</h1>\r\n        <a href=\"/\">back</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Weapon from \"./components/weapons/weapons\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Frontpage from \"./components/frontpage/frontpage\";\r\nimport Profile from \"./components/profile/profile\";\r\nimport { BrowserRouter, HashRouter, Route } from \"react-router-dom\";\r\n\r\nconst routing = (\r\n  <HashRouter>\r\n    <div style={{ width: 100 + \"%\", height: 100 + \"%\" }}>\r\n      <Route exact path=\"/\" component={Frontpage} />\r\n      <Route path=\"/weapons\" component={Weapon} />\r\n      <Route path=\"/profile/:username/:userid\" component={Profile} />\r\n    </div>\r\n  </HashRouter>\r\n);\r\n\r\nReactDOM.render(routing, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}